@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor #E3F2FD
skinparam classArrowColor #1565C0
skinparam noteBackgroundColor #FFF9C4
skinparam noteBorderColor #FBC02D

abstract class Command <<abstract>>{
  + {abstract} execute(...) : void
  + {abstract} isExit() : boolean
}

class AddExpenseCommand {
  + execute(...) : void
  + isExit() : boolean
}

class Summary {
  - totalIncome : double
  - totalExpense : double
  - totalSavings : double
  - observers : List<FinancialObserver>
  + addIncome(double)
  + addExpense(double)
  + addSavings(double)
  + getAvailableFunds() : double
  + registerObserver(FinancialObserver)
  + removeObserver(FinancialObserver)
  - notifyObservers()
}

interface FinancialObserver <<interface>> {
  + update(...) : void
}

class FundsAlert {
  - warningThreshold : double
  + update(...) : void
  + setWarningThreshold(double) : boolean
}

class SummaryDisplay {
  + displaySummary() : String
}


' --- Relationships ---
AddExpenseCommand --|> Command

Summary o-- "0..*" FinancialObserver
FundsAlert ..|> FinancialObserver

SummaryDisplay ..> Summary : uses >
AddExpenseCommand ..> Summary : modify >


' --- Notes ---
note top of Summary : **Central Financial Data Hub**\n• Stores financial data.\n• Manages observer notifications.

note left of FundsAlert : **Runtime Setup:**\nAn initializer (like Duke) creates\nSummary & FundsAlert, then calls\n`Summary.registerObserver(fundsAlert)`.

note bottom of FinancialObserver : **Observer Pattern**\nSummary aggregates Observers.\nChanges trigger `notifyObservers()`,\nwhich calls `update()` on observers.\n`FundsAlert` implements `update()`.

note right of AddExpenseCommand : **Command Pattern**\n`AddExpenseCommand` is an example.\nOther commands inherit from `Command`.\nSpecific commands modify relevant\nobjects (e.g., `Summary`, `FundsAlert`).

@enduml